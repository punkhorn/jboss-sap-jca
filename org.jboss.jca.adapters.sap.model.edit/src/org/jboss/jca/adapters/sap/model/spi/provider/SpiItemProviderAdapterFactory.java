/**
 */
package org.jboss.jca.adapters.sap.model.spi.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.jboss.jca.adapters.sap.model.spi.util.SpiAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpiItemProviderAdapterFactory extends SpiAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpiItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.jboss.jca.adapters.sap.model.spi.ConnectionRequestInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionRequestInfoItemProvider connectionRequestInfoItemProvider;

	/**
	 * This creates an adapter for a {@link org.jboss.jca.adapters.sap.model.spi.ConnectionRequestInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionRequestInfoAdapter() {
		if (connectionRequestInfoItemProvider == null) {
			connectionRequestInfoItemProvider = new ConnectionRequestInfoItemProvider(this);
		}

		return connectionRequestInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionRequestInfoEntryItemProvider connectionRequestInfoEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionRequestInfoEntryAdapter() {
		if (connectionRequestInfoEntryItemProvider == null) {
			connectionRequestInfoEntryItemProvider = new ConnectionRequestInfoEntryItemProvider(this);
		}

		return connectionRequestInfoEntryItemProvider;
	}

	/**
	 * This creates an adapter for a {@link org.jboss.jca.adapters.sap.model.spi.ConnectionRequestInfoStore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionRequestInfoStoreAdapter() {
		return new ConnectionRequestInfoStoreItemProvider(this);
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionRequestInfoStoreEntryItemProvider connectionRequestInfoStoreEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionRequestInfoStoreEntryAdapter() {
		if (connectionRequestInfoStoreEntryItemProvider == null) {
			connectionRequestInfoStoreEntryItemProvider = new ConnectionRequestInfoStoreEntryItemProvider(this);
		}

		return connectionRequestInfoStoreEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.jboss.jca.adapters.sap.model.spi.ManagedConnectionFactory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManagedConnectionFactoryItemProvider managedConnectionFactoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.jboss.jca.adapters.sap.model.spi.ManagedConnectionFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManagedConnectionFactoryAdapter() {
		if (managedConnectionFactoryItemProvider == null) {
			managedConnectionFactoryItemProvider = new ManagedConnectionFactoryItemProvider(this);
		}

		return managedConnectionFactoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.jboss.jca.adapters.sap.model.spi.ManagedConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManagedConnectionItemProvider managedConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.jboss.jca.adapters.sap.model.spi.ManagedConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManagedConnectionAdapter() {
		if (managedConnectionItemProvider == null) {
			managedConnectionItemProvider = new ManagedConnectionItemProvider(this);
		}

		return managedConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.jboss.jca.adapters.sap.model.spi.ResourceAdapter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceAdapterItemProvider resourceAdapterItemProvider;

	/**
	 * This creates an adapter for a {@link org.jboss.jca.adapters.sap.model.spi.ResourceAdapter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapterAdapter() {
		if (resourceAdapterItemProvider == null) {
			resourceAdapterItemProvider = new ResourceAdapterItemProvider(this);
		}

		return resourceAdapterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.jboss.jca.adapters.sap.model.spi.PackageRegistry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageRegistryItemProvider packageRegistryItemProvider;

	/**
	 * This creates an adapter for a {@link org.jboss.jca.adapters.sap.model.spi.PackageRegistry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageRegistryAdapter() {
		if (packageRegistryItemProvider == null) {
			packageRegistryItemProvider = new PackageRegistryItemProvider(this);
		}

		return packageRegistryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageRegistryEntryItemProvider packageRegistryEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageRegistryEntryAdapter() {
		if (packageRegistryEntryItemProvider == null) {
			packageRegistryEntryItemProvider = new PackageRegistryEntryItemProvider(this);
		}

		return packageRegistryEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
